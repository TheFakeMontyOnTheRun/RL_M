# Detect the OS and generate the binaries for that system only.
# Separate ifdefs because I dislike long trailing 'endifs'.

# =================================
# OFFICIALLY SUPPORTED *NIX SYSTEMS
# =================================
OS := $(shell uname)
ifeq ($(OS),Linux)
	BINARY = larn_gnulinux
endif
ifeq ($(OS),Darwin)
	BINARY = larn_osx
endif
ifeq ($(OS),FreeBSD)
	BINARY = larn_fbsd
endif

# =========================
# UNOFFICIAL WHICH MAY WORK
# =========================
ifeq ($(OS),GNU)
	BINARY = larn_gnu
endif
ifeq ($(OS),HP-UX)
	BINARY = larn_hpux
endif
ifeq ($(OS),AIX)
	BINARY = larn_aix
endif
ifeq ($(OS),Minix)
	BINARY = larn_minix
endif
ifeq ($(OS),Dragonfly)
	BINARY = larn_dfbsd
endif
ifeq ($(OS),OpenBSD)
	BINARY = larn_obsd
endif
ifeq ($(OS),NetBSD)
	BINARY = larn_nbsd
endif
ifeq ($(OS),UnixWare)
	BINARY = larn_uw
endif
ifeq ($(OS),SunOS)
	BINARY = larn_sunos
endif

# Below is the Main makefile stuff
ifeq ($(OS),Darwin || FreeBSD)
	CC = clang
	COMPILE_OPTIONS = -Os -pipe -Wall -fomit-frame-pointer -DNIX -DMULTIPLE_SCORE_ENTRY
else
	CC = gcc
	COMPILE_OPTIONS = -Os -pipe -Wall -fomit-frame-pointer -ansi -std=gnu99 -DNIX -DMULTIPLE_SCORE_ENTRY -Wl,-O1
endif

HEADERS = -Isrc/includes
LIBS = -lm -lncurses
DEPENDENCY_OPTIONS = -MM

# NO EDITING UNLESS YOU KNOW WHAT YOU ARE DOING!

SUBDIRS := $(shell ls -F | grep "\/" )
DIRS := ./ $(SUBDIRS)
SOURCE_FILES := $(foreach d, $(DIRS), $(wildcard $(d)*.c) )

OBJECTS = $(patsubst %.c, %.o, $(SOURCE_FILES))

DEPENDENCIES = $(patsubst %.c, %.d, $(SOURCE_FILES))

%.d: %.c
	$(CC) $(DEPENDENCY_OPTIONS) $< -MT "$*.o $*.d" -MF $*.d

all: $(DEPENDENCIES) $(BINARY)

$(BINARY): $(OBJECTS)
	$(CC) -o $(BINARY) $(OBJECTS) $(LIBS)

ifneq "$(strip $(DEPENDENCIES))" ""
  include $(DEPENDENCIES)
endif

%.o: %.c
	$(CC) -c $(COMPILE_OPTIONS) -o $@ $< $(HEADERS)

.PHONY: clean
clean:
	rm -f $(BINARY) $(OBJECTS)

.PHONY: cleandeps
cleandeps:
	rm -f $(DEPENDENCIES)

cleanall: clean cleandeps
